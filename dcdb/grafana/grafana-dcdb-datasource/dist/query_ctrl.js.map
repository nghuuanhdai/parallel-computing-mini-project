{"version":3,"sources":["../src/query_ctrl.js"],"names":["QueryCtrl","GenericDatasourceQueryCtrl","$scope","$injector","scope","target","levels","sensor","datasource","getMaxLevels","idx","maxLevels","push","length","levelsToRemove","pop","id","hierarchy","levelIdx","len","query","buildHierarchy","metricFindQuery","addNewLevel","removeLevels","panelCtrl","refresh","rawQuery","templateUrl"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAASA,e,kBAAAA,S;;;;;;;;;;;;;;;;;;;;;4CAGIC,0B;;;AAEX,4CAAYC,MAAZ,EAAoBC,SAApB,EAA+B;AAAA;;AAAA,8JACvBD,MADuB,EACfC,SADe;;AAG7B,gBAAKC,KAAL,GAAaF,MAAb;AACA,gBAAKG,MAAL,CAAYC,MAAZ,GAAqB,MAAKD,MAAL,CAAYC,MAAZ,IAAsB,CAAC,cAAD,CAA3C;;AAEA;AACA,gBAAKD,MAAL,CAAYE,MAAZ,GAAqB,MAAKF,MAAL,CAAYE,MAAZ,IAAsB,eAA3C;AACA,gBAAKC,UAAL,CAAgBC,YAAhB;;AAR6B;AAU9B;;AAED;;;;;sCACYC,G,EAAK;AACb,gBAAGA,MAAM,KAAKF,UAAL,CAAgBG,SAAhB,GAA4B,CAArC,EACE,KAAKN,MAAL,CAAYC,MAAZ,CAAmBM,IAAnB,CAAwB,cAAxB;AACL;;;uCAEYF,G,EAAK;AAChB,iBAAKL,MAAL,CAAYC,MAAZ,CAAmBI,MAAM,CAAzB,IAA8B,cAA9B;AACA,gBAAGA,MAAM,KAAKL,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4B,CAArC,EAAwC;AACtC,kBAAIC,iBAAiB,KAAKT,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4BH,GAA5B,GAAkC,CAAvD;AACA,qBAAMI,cAAN,EAAsB;AACpB,qBAAKT,MAAL,CAAYC,MAAZ,CAAmBS,GAAnB;AACAD;AACD;AACF;AACF;;;yCAGcE,E,EAAI;;AAEjB,gBAAIC,YAAW,QAAf;AACA;AACA,gBAAIC,QAAJ;AACA,gBAAIC,GAAJ;;AAEA;AACA,gBAAG,KAAKd,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4B,CAA/B,EAAkC;AAChC,kBAAGG,MAAM,CAAC,CAAV,EACEG,MAAMH,EAAN,CADF,KAEK;AACHG,sBAAM,KAAKd,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4B,CAAlC;AACA;AACA,oBAAI,KAAKR,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,IAA6B,KAAKL,UAAL,CAAgBG,SAA9C,IACC,KAAKN,MAAL,CAAYC,MAAZ,CAAmB,KAAKD,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4B,CAA/C,KAAqD,cADzD,EAEEM;AACH;;AAED,mBAAID,WAAW,CAAf,EAAkBA,WAAWC,GAA7B,EAAkCD,UAAlC;AACED,6BAAa,MAAM,KAAKZ,MAAL,CAAYC,MAAZ,CAAmBY,QAAnB,CAAnB;AADF;AAGD;;AAED;AACA,gBAAGF,MAAM,CAAC,CAAV;AACE;AACAC,2BAAa,eAAb;;AAEF,mBAAOA,SAAP;AACD;;;qCAEUG,K,EAAOV,G,EAAK;AACrB,gBAAIO,YAAY,KAAKI,cAAL,CAAoBX,GAApB,CAAhB;AACA,mBAAO,KAAKF,UAAL,CAAgBc,eAAhB,CAAgCF,KAAhC,EAAuCH,aAAa,EAApD,CAAP;AACD;;;2CAEgBP,G,EAAK;;AAEpB;AACA,gBAAGA,OAAO,CAAC,CAAX,EAAc;AACZ,kBAAGA,OAAO,KAAKL,MAAL,CAAYC,MAAZ,CAAmBO,MAAnB,GAA4B,CAAtC,EACE,KAAKU,WAAL,CAAiBb,GAAjB,EADF,KAGE,KAAKc,YAAL,CAAkBd,GAAlB;AACH;AACD,iBAAKe,SAAL,CAAeC,OAAf,GAToB,CASM;AAC3B;;;6CAEkB;AACjB,iBAAKrB,MAAL,CAAYsB,QAAZ,GAAuB,CAAC,KAAKtB,MAAL,CAAYsB,QAApC;AACD;;;;QAnF6C3B,S;;;;AAuFhDC,iCAA2B2B,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import { QueryCtrl } from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector) {\n    super($scope, $injector);\n    \n    this.scope = $scope;\n    this.target.levels = this.target.levels || ['select level'];\n\n    //Sensor dropdown menu values\n    this.target.sensor = this.target.sensor || 'select sensor';\n    this.datasource.getMaxLevels();\n    \n  } \n\n  //Add a new level to the array.\n  addNewLevel(idx) {\n      if(idx < this.datasource.maxLevels - 1)\n        this.target.levels.push('select level');\n  }\n\n  removeLevels(idx) {\n    this.target.levels[idx + 1] = 'select level';\n    if(idx < this.target.levels.length - 1) {\n      var levelsToRemove = this.target.levels.length - idx - 2;\n      while(levelsToRemove) {\n        this.target.levels.pop();\n        levelsToRemove--;\n      }\n    }\n  }\n\n  //Builds the hierachical query to be sent to the backend (e.g., /system/rack/chassis/sensor).\n  buildHierarchy(id) {\n    \n    var hierarchy= \"?node=\";\n    //var hierarchy= \"\";\n    var levelIdx;\n    var len;\n    \n    //Builds hierarchy for the request\n    if(this.target.levels.length > 1) {\n      if(id != -1)\n        len = id;\n      else {\n        len = this.target.levels.length - 1;\n        //Don't consider the 'select level' form in building the hierarchy \n        if((this.target.levels.length == this.datasource.maxLevels) && \n           (this.target.levels[this.target.levels.length - 1] != 'select level'))\n          len++;\n      }\n\n      for(levelIdx = 0; levelIdx < len; levelIdx++) \n        hierarchy += \"/\" + this.target.levels[levelIdx]; \n\n    }\n\n    //Check if request came from the sensor form\n    if(id == -1)\n      //hierarchy += \"/sensor\";\n      hierarchy += \";sensors=true\";\n \n    return hierarchy;\n  }\n\n  getOptions(query, idx) {\n    var hierarchy = this.buildHierarchy(idx);\n    return this.datasource.metricFindQuery(query, hierarchy || '');\n  }\n\n  onChangeInternal(idx) {\n\n    //Add/remove new levels if the request did not come from the sensor form.\n    if(idx != -1) {\n      if(idx == this.target.levels.length - 1)\n        this.addNewLevel(idx);\n      else\n        this.removeLevels(idx);\n    }\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';\n\n"]}