{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasourceQueryCtrl","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","maxLevels","options","query","buildQueryParameters","targets","filter","t","hide","when","data","getAdhocFilters","adhocFilters","doRequest","method","then","response","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","result","hierarchy","interpolated","target","mapToTextValue","map","d","i","text","value","isObject","datasourceRequest","sensor","scopedVars","refId","Promise","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\nimport { GenericDatasourceQueryCtrl } from \"./query_ctrl\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n    this.maxLevels = 0;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    if (this.templateSrv.getAdhocFilters) {\n      query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n    } else {\n      query.adhocFilters = [];\n    }\n\n    return this.doRequest({\n      url: this.url + '/query',\n      data: query,\n      method: 'POST'\n    });\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  getMaxLevels() {\n    this.doRequest({\n      url: this.url + '/levels',\n      method: 'POST',\n    }).then(result => {\n      this.maxLevels = result.data[0];\n    });\n  }\n\n  metricFindQuery(query, hierarchy) {\n    var interpolated = {\n        target: this.templateSrv.replace(query, null, 'regex')\n    };\n\n    return this.doRequest({\n      url: this.url + '/search' + hierarchy,\n      data: interpolated,\n      method: 'POST',\n    }).then(this.mapToTextValue);\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.sensor !== 'select sensor';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.sensor, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}